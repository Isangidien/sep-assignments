1. Describe an analogy for relating an algorithm that has efficiency O(1) and another algorithm that has O(2n). An example would be:
A. Joan Benoit's speed as O(1), the best-case performance, and a toddler that can barely run, would  be O(2^n), if we assume that the only humans accounted for are those who have fully-functioning legs.

2. In plain English, what is the best case scenario for binary search?
A. first node is equal to item being searched for. Ω(1).

3. In plain English, what is the worst-case scenario for binary search?
A. last node is equal to item being searched for. O(n).

4. In plain English, what is the bounded-case scenario for binary search?
A. item being searched is not the first and not the last, but somewhere in between. Ө(log n).

5. Create a graph using the data below. Here's a CSV with the values you'll need.
A. please see graph_loglinear.xls

6. What is the limit of the function above as n approaches infinity?
A. limit log(n) is infinity

7. What is the Big-O of an algorithm that has the data points above?
A. O(log n)

8. Write a Ruby method that takes a number n. This method must print the worst-case number of iterations for linear search to find an item in collections of size one to n. Use it to generate a table of worst-case iterations of collections up to size 10.
A. See linear_fn.rb

9. Create a graph from the output using Google Sheets or other graphing software. Analyze the graph and denote its Big-O somewhere on the graph.
A. graph_Linear.xls

10. What is the Big-O of binary search?
A. O(log n)

11. What is the Big-Ω of binary search?
A. Ω(1)

12. What is the Big-Ө of binary search?
A. Ө(log(n))
